package main

import (
	"fmt"
	"log"
	"net/http"
	"time"
)

func main() {
	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞
	go func() {
		ticker := time.NewTicker(10 * time.Second)
		defer ticker.Stop()
		
		for {
			select {
			case <-ticker.C:
				fmt.Printf("üïí [%s] Hello World!\n", time.Now().Format("15:04:05"))
			}
		}
	}()

	// HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, `
<!DOCTYPE html>
<html>
<head>
    <title>Go Hello World Server</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .container { max-width: 600px; margin: 0 auto; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Go Hello World Server</h1>
        <p>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ</p>
        <p>–ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è "Hello World"</p>
        <p><a href="/status">–°—Ç–∞—Ç—É—Å</a></p>
    </div>
</body>
</html>
		`)
	})

	http.HandleFunc("/status", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		fmt.Fprintf(w, `{
			"status": "running",
			"message": "Go Hello World Server", 
			"timestamp": "%s"
		}`, time.Now().Format(time.RFC3339))
	})

	fmt.Println("üöÄ Server starting on :8080")
	fmt.Println("üìù Hello World –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –≤ –∫–æ–Ω—Å–æ–ª—å...")
	log.Fatal(http.ListenAndServe(":8080", nil))
}